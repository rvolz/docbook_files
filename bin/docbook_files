#!/usr/bin/env ruby
# -*-encoding:utf-8 ; mode:ruby-*-
##
#

require 'rubygems'
#require "bundler/setup"
require 'optparse'
#require 'yaml'
#require 'json'
require 'term/ansicolor'

class String
  include Term::ANSIColor
end


require File.expand_path(File.join(File.dirname(__FILE__), %w[.. lib docbook_files]))

banner = <<EOB
docbook_files, Version #{DocbookFiles::VERSION}

Displays the include hierarchy of a DocBook 5 project. 
Use the options to see additional information about each file. 
Files that could not be found are shown in red.

Usage: docbook_files [options] <DOCBOOK-FILE>
EOB

@output_format = :screen

props = []
opts = OptionParser.new
ivs = DocbookFiles::FileData.init_vars
ivs.each do |k,v|
	opts.on("--#{k.to_s}","#{v}") {|val| props << k}
end
opts.banner = banner
rest = opts.parse(ARGV)

# Print banner if called without arguments
if rest.length < 1
  puts opts.to_s 
  exit 1
end

unless File.exists?(rest[0])
  STDERR.puts "Error: File #{rest[0]} not found."
  exit 1
end

# The main routine
puts("docbook_status, Version #{DocbookFiles::VERSION}") if @output_format == :screen
dbf = DocbookFiles::Docbook.new(rest[0])
table = dbf.list_as_table([:name,:exists]+props)
puts '-'*10
puts
output_string = "%s %s" + props.map{|p| " %s"}.join


table.each_with_index do |t,index|
	vals = ['-'*t[:level],t[:name]] + props.map {|p| 
		if (t[p].nil? || t[p].empty?)
			'<>'
		else
			t[p]
		end
		}
	#vals = ([' '*t[:level],t[:name]] + props.map{|p| t[p]})
	output = output_string % vals
	if (index == 0)
		output = "+" + output
	elsif (index == table.length-1)
		output = "+" + output
	else
		output = "|" + output
	end
	if t[:exists] == false
		puts output.red
	else
		puts output
	end
end
puts
exit 0
